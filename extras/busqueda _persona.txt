{% load static %}
<head>
    {{ form.media }}  {# Esto incluye los JS y CSS de DAL Select2 #}
</head>

<div class="form-row align-items-end mt-3">
  <div class="form-group col-md-5">
    {{ form.persona.label_tag }}
    <div class="input-group">
      {{ form.persona }}
      <a href="{% url 'persona:persona_create' %}?next={{ request.path }}" 
         class="btn btn-outline-secondary ms-2" 
         title="Agregar nueva persona">
        <i class="fas fa-plus"></i>
      </a>
    </div>
  </div>
</div>

from dal import autocomplete
from .models import Persona

class PersonaAutocomplete(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Persona.objects.all()
        if self.q:
            qs = qs.filter(apellido__icontains=self.q) | qs.filter(nombre__icontains=self.q)
        return qs

from django.urls import path
from .autocomplete import PersonaAutocomplete

app_name = 'persona'  # Muy importante para usar namespace
urlpatterns = [
    path('persona-autocomplete/', PersonaAutocomplete.as_view(), name='persona-autocomplete'),
]


from django.urls import path, include

urlpatterns = [
    path('persona/', include('persona.urls', namespace='persona')),
    # otras urls...
]

from dal import autocomplete
from persona.models import Persona

persona = forms.ModelChoiceField(
    queryset=Persona.objects.all(),
    widget=autocomplete.ModelSelect2(
        url='persona:persona-autocomplete',  # <- con namespace
        attrs={'class': 'form-control', 'data-placeholder': 'Buscar persona...'}
    )
)


from dal import autocomplete
from .models import Persona

class PersonaAutocomplete(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Persona.objects.all()
        if self.q:
            qs = qs.filter(apellido__icontains=self.q) | qs.filter(nombre__icontains=self.q)
        return qs


from django.urls import path
from .autocomplete import PersonaAutocomplete

app_name = 'persona'

urlpatterns = [
    path('persona-autocomplete/', PersonaAutocomplete.as_view(), name='persona-autocomplete'),
]


from django.urls import path
from .autocomplete import PersonaAutocomplete

app_name = 'persona'

urlpatterns = [
    path('persona-autocomplete/', PersonaAutocomplete.as_view(), name='persona-autocomplete'),
]


from django.urls import path, include

urlpatterns = [
    path('persona/', include('persona.urls', namespace='persona')),
    # otras urls...
]

from django import forms
from dal import autocomplete
from django.forms import modelformset_factory
from .models import Expediente, ExpedienteDocumento
from persona.models import Persona

class DemandaEspontaneaForm(forms.ModelForm):
    class Meta:
        model = Expediente
        fields = [
            'persona', 'sede', 'fecha_creacion', 'medio_ingreso', 
            'tipo_solicitud', 'estado_expediente', 'grupo_etario', 
            'edad_persona', 'situacion_habitacional_hist', 
            'resumen_intervencion', 'observaciones'
        ]
        widgets = {
            'persona': autocomplete.ModelSelect2(
                url='persona:persona-autocomplete',
                attrs={'class': 'form-control', 'data-placeholder': 'Buscar persona...'}
            ),
            'sede': forms.Select(attrs={'class': 'form-control'}),
            'medio_ingreso': forms.Select(attrs={'class': 'form-control'}),
        }

class ExpedienteDocumentoForm(forms.ModelForm):
    class Meta:
        model = ExpedienteDocumento
        fields = ['nombre', 'archivo']
        widgets = {
            'nombre': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Nombre del documento'}),
            'archivo': forms.ClearableFileInput(attrs={'class': 'form-control'}),
        }

ExpedienteDocumentoFormSet = modelformset_factory(
    ExpedienteDocumento,
    form=ExpedienteDocumentoForm,
    extra=2,
    can_delete=True
)

from django.views.generic import FormView
from django.contrib import messages
from django.db import transaction
from django.urls import reverse_lazy
from .forms import DemandaEspontaneaForm, ExpedienteDocumentoFormSet
from .models import Expediente, ExpedientePersona
from core.models import Rol
import datetime

class DemandaEspontaneaCreateView(FormView):
    template_name = 'expediente/demanda_espontanea_form.html'
    form_class = DemandaEspontaneaForm
    success_url = reverse_lazy('expediente:expediente_list')

    def get_initial(self):
        initial = super().get_initial()
        medio_id = self.kwargs.get('medio_id')
        persona_id = self.request.GET.get('persona_id')
        if medio_id:
            initial['medio_ingreso'] = medio_id
            initial['fecha_creacion'] = datetime.date.today
        if persona_id:
            initial['persona'] = persona_id
        return initial

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        if self.request.POST:
            context['documento_formset'] = ExpedienteDocumentoFormSet(
                self.request.POST, self.request.FILES, queryset=ExpedienteDocumento.objects.none()
            )
        else:
            context['documento_formset'] = ExpedienteDocumentoFormSet(queryset=ExpedienteDocumento.objects.none())
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        documento_formset = context['documento_formset']

        if not documento_formset.is_valid():
            return self.form_invalid(form)

        try:
            rol = Rol.objects.get(pk=1)
        except Rol.DoesNotExist:
            form.add_error(None, 'El rol con ID 1 no existe.')
            return self.form_invalid(form)

        with transaction.atomic():
            expediente = form.save()
            persona = form.cleaned_data['persona']
            ExpedientePersona.objects.create(
                expediente=expediente,
                persona=persona,
                rol=rol
            )

            for doc_form in documento_formset:
                if doc_form.cleaned_data.get('archivo'):
                    doc = doc_form.save(commit=False)
                    doc.expediente = expediente
                    doc.save()

        messages.success(self.request, "Expediente creado con sus documentos.")
        return super().form_valid(form)


<form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.media }}  {# Carga JS/CSS DAL #}

    <div class="card p-3 mb-3 shadow-sm">
        <h5>Datos del expediente</h5>
        {{ form.as_p }}
    </div>

    <div class="card p-3 mb-3 shadow-sm">
        <h5>Documentos adjuntos</h5>
        {{ documento_formset.management_form }}
        {% for doc_form in documento_formset %}
            <div class="mb-3 border p-2 rounded">
                {{ doc_form.as_p }}
            </div>
        {% endfor %}
    </div>

    <div class="mt-3">
        <a href="{% url 'persona:persona_create' %}?next={{ request.path }}" 
           class="btn btn-outline-secondary">
           <i class="fas fa-plus"></i> Agregar nueva persona
        </a>
        <button type="submit" class="btn btn-success">Guardar expediente</button>
    </div>
</form>
