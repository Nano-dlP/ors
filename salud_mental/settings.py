"""
Django settings for salud_mental project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/

"""
from django.core.exceptions import ImproperlyConfigured
import json


from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

with open(BASE_DIR / 'secrets_casa.json') as f:
    secrets = json.load(f)
def get_secret(setting, secrets=secrets):
    """Get the secret variable or return explicit exception."""
    try:
        return secrets[setting]
    except KeyError:
        error_msg = f"Set the {setting} environment variable"
        raise ImproperlyConfigured(error_msg)
    

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = get_secret('SECRET_KEY')

#'django-insecure-wgulrip_2)gk1an+d4!p59ps567gi)%u)(m@6otnj!yg_3(*hj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'widget_tweaks',  # For form rendering tweaks
    
    'core',  # Your core app
    'persona',  # Your persona app
    'usuario',  # Bootstrap 4 support
    'institucion',  # Your institution app
    'expediente',  # Your expediente app
    'internacion',  # Your internacion app
    'intervencion',  # Your intervencion app
    'profesional',
]


# Usar un backend de cache compartido (Redis/Memcached) es recomendado:
if DEBUG:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-dev-cache",
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://127.0.0.1:6379/1",
            "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        }
    }

MIDDLEWARE = [
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',  # Middleware para manejar sesiones
    'usuario.middleware.block_ip_middleware.BlockIPMiddleware', 
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',


    'django_session_timeout.middleware.SessionTimeoutMiddleware',  # Middleware para manejar tiempo de espera de sesión

    'core.middleware.RegistrarClienteMiddleware',  # Custom middleware to log client requests. Desactivated for performance.

    #'usuario.middleware.block_ip_middleware.BlockIPMiddleware',  # Añadir el middleware al inicio (o al menos antes de que procesen vistas)



]

#https://pypi.org/project/django-session-timeout/

SESSION_EXPIRE_SECONDS = 60 # 1 minute
SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True # Reiniciar el contador cada vez que el usuario interactúa
SESSION_EXPIRE_AFTER_LAST_ACTIVITY_GRACE_PERIOD = 60 # Margen para agrupar requests frecuentes por minutos
SESSION_TIMEOUT_REDIRECT = 'core:login'  # A dónde enviar al usuario cuando la sesión vence

# Cuánto dura una sesión (en segundos)
SESSION_COOKIE_AGE = 3600  # 1 hora

# Si la cookie se renueva con cada request
SESSION_SAVE_EVERY_REQUEST = True

# Si la sesión se borra al cerrar el navegador
SESSION_EXPIRE_AT_BROWSER_CLOSE = False


# Parámetros para el bloqueo por IP
IP_BLOCK_ATTEMPT_LIMIT = 3         # bloquear al tercer intento
IP_BLOCK_ATTEMPT_WINDOW = 5 * 60   # ventana para contar intentos (5 minutos)
IP_BLOCK_TIME = 60 * 15            # bloqueo temporal (15 minutos)



ROOT_URLCONF = 'salud_mental.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.fecha_hora_actual',
            ],
        },
    },
]

WSGI_APPLICATION = 'salud_mental.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": get_secret('ENGINE'),
        "NAME": get_secret('NAME'),
        "USER": get_secret('USER'),
        "PASSWORD": get_secret('PASSWORD'),
        "HOST": get_secret('HOST'),
        "PORT": get_secret('PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es'      # idioma español
USE_I18N = True           # activar internacionalización
USE_L10N = True           # activar localización
TIME_ZONE = 'America/Argentina/Buenos_Aires'  # tu zona horaria
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Archivos estáticos
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

LOGIN_URL = 'core:login'  # nombre de la URL de tu login
LOGIN_REDIRECT_URL = '/'   # a donde se redirige tras login
LOGOUT_REDIRECT_URL = '/login/'  # tras logout




# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#
AUTH_USER_MODEL = 'usuario.CustomUser'

# Configuración del correo electrónico
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Para desarrollo, imprime en la consola
# Para producción, usa SMTP u otro backend adecuado

if DEBUG:
    # Desarrollo → imprime mails en consola
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    # Producción → usa SMTP real
    EMAIL_BACKEND = get_secret('EMAIL_BACKEND'),
    EMAIL_HOST = get_secret('EMAIL_HOST'),
    EMAIL_PORT = get_secret('EMAIL_PORT'),
    EMAIL_USE_TLS = get_secret('EMAIL_USE_TLS'),
    EMAIL_HOST_USER = get_secret('EMAIL_HOST_USER'),
    EMAIL_HOST_PASSWORD = get_secret('EMAIL_HOST_PASSWORD'),
    EMAIL_FILE_PATH = get_secret('EMAIL_FILE_PATH')  # Configuración de mensajes


from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',  # Bootstrap usa 'danger' en lugar de 'error'
}