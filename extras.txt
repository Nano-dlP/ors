Funcion para paython (django) para conocer la ip, navegados, ectcetera  de quien se conecta

1 - CREAR UN MODELO

from django.db import models

class ClienteLog(models.Model):
    ip = models.GenericIPAddressField()
    navegador = models.CharField(max_length=255)
    sistema_operativo = models.CharField(max_length=255)
    user_agent = models.TextField()
    fecha = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.ip} - {self.fecha}"


2 - FUNCION QUE OBTIENE Y GUARDA LOS DATOS

pip install httpagentparser


import httpagentparser
from .models import ClienteLog

def registrar_cliente(request):
    # IP real o directa
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')

    user_agent = request.META.get('HTTP_USER_AGENT', '')
    navegador = ''
    sistema_operativo = ''

    try:
        parsed = httpagentparser.simple_detect(user_agent)
        sistema_operativo = parsed[0]
        navegador = parsed[1]
    except:
        navegador = 'Desconocido'
        sistema_operativo = 'Desconocido'

    # Guardar en la base de datos
    ClienteLog.objects.create(
        ip=ip,
        navegador=navegador,
        sistema_operativo=sistema_operativo,
        user_agent=user_agent
    )


3 - LAMADA DESDE CUALQUIER VISTA

from django.http import HttpResponse
from .utils import registrar_cliente  # o donde hayas puesto la funci√≥n

def mi_vista(request):
    registrar_cliente(request)
    return HttpResponse("Informaci√≥n registrada.")



¬øQuer√©s tambi√©n registrar la URL visitada, el usuario logueado (si hay) o el referer? Te lo puedo agregar f√°cilmente.

Perfecto. A continuaci√≥n te muestro la versi√≥n completa de la funci√≥n que:

Obtiene y guarda:

IP

Navegador

Sistema operativo

User-Agent

URL visitada

Usuario (si est√° logueado)

Referer (de d√≥nde vino el usuario)

Fecha/hora


1 - MODELO ACTUALIZADO

from django.db import models
from django.contrib.auth.models import User

class ClienteLog(models.Model):
    usuario = models.ForeignKey(User, null=True, blank=True, on_delete=models.SET_NULL)
    ip = models.GenericIPAddressField()
    navegador = models.CharField(max_length=255)
    sistema_operativo = models.CharField(max_length=255)
    user_agent = models.TextField()
    url = models.URLField(max_length=500)
    referer = models.URLField(max_length=500, blank=True, null=True)
    fecha = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.usuario or self.ip} visit√≥ {self.url} el {self.fecha}"


2 - FUNCION QUE REGISTRA TODO (utils.py o similar)

import httpagentparser
from .models import ClienteLog

def registrar_cliente(request):
    # IP
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    ip = x_forwarded_for.split(',')[0] if x_forwarded_for else request.META.get('REMOTE_ADDR')

    # User Agent
    user_agent = request.META.get('HTTP_USER_AGENT', '')
    try:
        parsed = httpagentparser.simple_detect(user_agent)
        sistema_operativo = parsed[0]
        navegador = parsed[1]
    except:
        sistema_operativo = 'Desconocido'
        navegador = 'Desconocido'

    # URL actual
    url = request.build_absolute_uri()

    # Referer
    referer = request.META.get('HTTP_REFERER', '')

    # Usuario (si est√° autenticado)
    usuario = request.user if request.user.is_authenticated else None

    # Guardar log
    ClienteLog.objects.create(
        usuario=usuario,
        ip=ip,
        navegador=navegador,
        sistema_operativo=sistema_operativo,
        user_agent=user_agent,
        url=url,
        referer=referer or None
    )


3 - EJEMPLO DE USO EN UNA VISTA (views.py)

from django.http import HttpResponse
from .utils import registrar_cliente

def mi_vista(request):
    registrar_cliente(request)
    return HttpResponse("Tu visita ha sido registrada.")


‚úÖ 1. Middleware para registrar autom√°ticamente todas las visitas
Este middleware llamar√° a registrar_cliente(request) para todas las vistas autom√°ticamente.

üìÅ middleware.py (crear en tu app si no existe)

from .utils import registrar_cliente

class RegistrarClienteMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)

        # Solo registrar si no es admin o static/media
        if not request.path.startswith('/admin') and not request.path.startswith('/static') and not request.path.startswith('/media'):
            try:
                registrar_cliente(request)
            except Exception as e:
                # Si quer√©s loguear errores pod√©s hacerlo aqu√≠
                pass

        return response


‚úÖ 2. Activar el middleware en settings.py
Agregalo al final de la lista de MIDDLEWARE:

MIDDLEWARE = [
    ...
    'tuapp.middleware.RegistrarClienteMiddleware',
]
Reemplaz√° tuapp con el nombre real de tu aplicaci√≥n Django.


‚úÖ 3. Admin personalizado para ver los registros
En tu archivo admin.py:

from django.contrib import admin
from .models import ClienteLog

@admin.register(ClienteLog)
class ClienteLogAdmin(admin.ModelAdmin):
    list_display = ('fecha', 'usuario', 'ip', 'navegador', 'sistema_operativo', 'url')
    search_fields = ('ip', 'usuario__username', 'user_agent', 'url', 'referer')
    list_filter = ('fecha', 'sistema_operativo', 'navegador')
    readonly_fields = [f.name for f in ClienteLog._meta.fields]
    ordering = ['-fecha']

    def has_add_permission(self, request):
        return False  # solo lectura

    def has_change_permission(self, request, obj=None):
        return False  # evitar edici√≥n

    def has_delete_permission(self, request, obj=None):
        return False  # evitar eliminaci√≥n


‚úÖ 1. Exportar a Excel desde el admin
Vamos a usar openpyxl para generar archivos .xlsx f√°cilmente.

üì¶ Instalar dependencia

pip install openpyxl


üõ† Modificar admin.py para exportar
Actualiz√° tu archivo admin.py con este c√≥digo completo:

import datetime
from django.contrib import admin
from django.http import HttpResponse
from openpyxl import Workbook
from .models import ClienteLog

@admin.register(ClienteLog)
class ClienteLogAdmin(admin.ModelAdmin):
    list_display = ('fecha', 'usuario', 'ip', 'navegador', 'sistema_operativo', 'url')
    search_fields = ('ip', 'usuario__username', 'user_agent', 'url', 'referer')
    list_filter = ('fecha', 'sistema_operativo', 'navegador', 'ip', 'usuario')
    readonly_fields = [f.name for f in ClienteLog._meta.fields]
    actions = ['exportar_a_excel']
    ordering = ['-fecha']

    def has_add_permission(self, request):
        return False

    def has_change_permission(self, request, obj=None):
        return False

    def has_delete_permission(self, request, obj=None):
        return False

    def exportar_a_excel(self, request, queryset):
        workbook = Workbook()
        worksheet = workbook.active
        worksheet.title = "Clientes"

        # Cabeceras
        headers = [
            'Fecha', 'Usuario', 'IP', 'Navegador', 'Sistema Operativo',
            'User-Agent', 'URL', 'Referer'
        ]
        worksheet.append(headers)

        # Filas de datos
        for obj in queryset:
            worksheet.append([
                obj.fecha.strftime('%Y-%m-%d %H:%M:%S'),
                str(obj.usuario) if obj.usuario else '',
                obj.ip,
                obj.navegador,
                obj.sistema_operativo,
                obj.user_agent,
                obj.url,
                obj.referer or ''
            ])

        # Preparar la respuesta
        response = HttpResponse(
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        filename = f"registros_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        response['Content-Disposition'] = f'attachment; filename={filename}'

        workbook.save(response)
        return response

    exportar_a_excel.short_description = "Exportar seleccionados a Excel"


‚úÖ 2. Resultado

    Desde el admin pod√©s buscar por IP, URL, navegador, usuario, etc.

    Filtrar por fecha, sistema operativo, etc.

    Seleccionar registros y usar la acci√≥n "Exportar seleccionados a Excel".

¬øQuer√©s tambi√©n permitir exportaci√≥n por rango de fechas o agregar un bot√≥n general para todo el log (sin seleccionar)?


stilos
<style>
  .custom-color { color: #4a6572 !important; }
  .custom-bg { background-color: #4a6572 !important; color: #fff !important; }
  .custom-btn {
    background-color: #4a6572 !important;
    color: #fff !important;
    border: none;
    box-shadow: 0 2px 8px rgba(74, 101, 114, 0.2);
  }
  .custom-btn:hover, .custom-btn:focus {
    background-color: #35505c !important;
    color: #fff !important;
  }
  .input-group-text.custom-bg { border: none; }
  .icon-btn { color: #fff !important; }
</style>